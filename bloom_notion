// Set up variables for Bloom.io API and Notion database
const bloomApi = 'YOUR_BLOOM_API_KEY';
const notionDbId = 'ID_OF_YOUR_NOTION_DATABASE';
const notionApiKey = 'YOUR_NOTION_API_KEY';

// Function to check if an email response has been received from a client
async function checkResponseReceived(requestDate) {
  const notionApiUrl = `https://api.notion.com/v1/databases/${notionDbId}/query`;

  const response = await fetch(notionApiUrl, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${notionApiKey}`,
      'Content-Type': 'application/json',
      'Notion-Version': '2022-06-28',  // Use the appropriate API version
    },
    body: JSON.stringify({
      filter: {
        property: 'Request Date',
        date: {
          equals: requestDate
        }
      }
    })
  });

  const data = await response.json();

  // Assuming the Notion DB returns results in `results` array
  if (data.results && data.results.length > 0) {
    const row = data.results[0];  // Take the first matching row
    return !row.properties['Response Received'].checkbox;  // Check if response is not received
  }
  
  return null;  // If the request date is not found
}

// Function to send a follow-up email using Bloom.io API
async function sendFollowUpEmail(requestId) {
  const bloomApiUrl = `https://api.bloom.io/v1/requests/${requestId}/follow_up`;

  try {
    const response = await fetch(bloomApiUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${bloomApi}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        // Add your follow-up email payload here, modify as needed
        subject: "Follow-up on your request",
        message: "We are following up on your request. Please let us know if you need further assistance.",
      })
    });

    const result = await response.json();
    if (response.ok) {
      console.log('Follow-up email sent successfully:', result);
    } else {
      console.error('Error sending follow-up email:', result);
    }
  } catch (error) {
    console.error('Error sending follow-up email:', error);
  }
}

// Main script logic
async function main() {
  const now = new Date().toISOString().split('T')[0];  // Get current date in YYYY-MM-DD format

  try {
    const notionApiUrl = `https://api.notion.com/v1/databases/${notionDbId}/query`;
    const response = await fetch(notionApiUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${notionApiKey}`,
        'Content-Type': 'application/json',
        'Notion-Version': '2022-06-28',
      },
      body: JSON.stringify({
        filter: {
          property: 'Response Received',
          checkbox: {
            equals: false  // Filter requests that haven't received a response
          }
        }
      })
    });

    const data = await response.json();
    const rows = data.results;

    for (const row of rows) {
      const requestDate = row.properties['Request Date'].date.start;  // Assuming `start` holds the request date
      const requestId = row.properties['Request ID'].rich_text[0].plain_text;  // Adjust if different in your DB

      // Check if a response has been received, and if not, send follow-up email
      if (await checkResponseReceived(requestDate)) {
        await sendFollowUpEmail(requestId);
      }
    }
  } catch (error) {
    console.error('Error querying Notion database:', error);
  }
}

// Run the main script every hour to check for new requests and send follow-ups as needed
setInterval(() => {
  main().catch((error) => console.error('Error in main script:', error));
}, 3600000);
